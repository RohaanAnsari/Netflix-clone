{"version":3,"sources":["axios.js","request.js","Banner.js","Nav.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflix0riginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","alt","src","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","poster_path","key","id","videoId","opts","height","width","playerVars","autoplay","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f7f667e2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base url to make requests to the movie database\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"d8f4bda900c886b346b367a65609ae34\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflix0riginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movies/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios'\r\nimport requests from './request'\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflix0riginals)\r\n            setMovie(\r\n                request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, []);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header\r\n            className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                )`,\r\n                backgroundPosition: \"top\"\r\n            }}\r\n        >\r\n\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n\r\n                <div className=\"banner--fadebottom\" ></div>\r\n            </div>\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./Nav.css\"\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else {\r\n                handleShow(false);\r\n            }\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                alt=\"logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n            />\r\n            <img\r\n                className=\"nav__avatar\"\r\n                alt=\"avatar\"\r\n                src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './request';\r\nimport './Row.css';\r\n\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst baseUrl = \"https://images.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return requests;\r\n        }\r\n        fetchData()\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                })\r\n                .catch((error) => console.log(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n\r\n                {movies.map(movie => (\r\n                    <img\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt={movie.name}\r\n                        key={movie.id}\r\n                    />\r\n\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\n\nimport './App.css';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport requests from './request';\nimport Row from './Row';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Nav />\n      <Banner />\n\n      <Row\n        title=\"NETFLIX  ORIGINALS\"\n        fetchUrl={requests.fetchNetflix0riginals}\n        isLargeRow\n      />\n      <Row title=\"TRENDING NOW\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"ACTION MOVIES\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"COMEDY MOVIES\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"HORROR MOVIES\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"ROMANCE MOVIES\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"DOCUMENTARIES\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}